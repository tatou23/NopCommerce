{"version":3,"file":"reporter.js","names":["_allureJsCommons","require","_reporter","_utils","_excluded","_excluded2","_excluded3","_excluded4","_excluded5","_excluded6","_excluded7","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_classPrivateFieldInitSpec","a","_checkPrivateRedeclaration","set","has","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","_endAllSpecs","WeakMap","_applyAllureCypressMessages","_startRun","_startSuite","_pushNewSuiteScope","_stopSuite","_writeLastSuiteScope","_startHook","_stopHook","_startTest","_addNewTestResult","_failHookAndTest","_passTest","_skipTest","_addSkippedTest","_stopTest","_stopExistingTestResult","_fixTestStepStops","_fixFixtureStepStops","_fixStepStops","_startStep","_stopStep","_finalizeStep","_applyRuntimeApiMessages","_emitPreviousTestScope","_resolveRootUuid","_attachSpecVideo","_emitRemainingScopes","_initializeSpecContext","AllureCypress","constructor","config","undefined","Map","on","reportAllureCypressSpecMessages","args","reportFinalAllureCypressSpecMessages","isInteractive","endSpec","absolutePath","onAfterSpec","onAfterRun","spec","results","_results$video","absolute","video","endRun","allureRuntime","writeEnvironmentInfo","writeCategoriesDefinitions","specAbsolutePath","cypressVideoPath","specContext","specContextByAbsolutePath","delete","_ref","messages","message","type","context","data","_ref2","id","name","root","suiteNames","suiteId","scope","startScope","suiteScopes","suiteIdToScope","suiteScopeToId","_ref3","pop","writeScope","_ref4","scopeType","position","start","isEach","isAfterEach","testScope","last","fixture","startFixture","status","_ref5","duration","fixtureUuid","updateFixture","_fixture$status","Status","PASSED","stopFixture","_ref6","fullNameSuffix","testResultData","test","videoScope","_ref7","scopes","labels","metadataLabels","otherTestData","posixPath","getPosixPath","specPath","startTest","stage","Stage","RUNNING","getLanguageLabel","getFrameworkLabel","getSuiteLabels","getEnvironmentLabels","getHostLabel","getThreadLabel","getPackageLabel","fullName","concat","titlePath","split","_ref8","statusDetails","setError","result","assign","testUuid","updateTest","failed","testResult","_ref9","SKIPPED","_ref10","suites","retries","map","Boolean","writeTest","_ref11","_ref12","parameters","toString","excluded","FINISHED","stopTest","_ref13","stop","steps","step","at","_ref14","properties","rootUuid","stepUuid","startStep","stepsByFrontEndId","_ref15","updateStep","stopStep","_ref16","applyRuntimeMessages","_context$fixture","shouldVideoBeAttached","videoOnFailOnly","writeAttachment","contentType","ContentType","MP4","getRelativePath","resultsDir","rest","ReporterRuntime","writer","createDefaultWriter","exports","createRuntimeState","allureConfig","getRuntimeConfigDefaults","initialized","testPlan","parseTestPlan","projectDir","getProjectRoot","stepStack","stepsToFinalize","nextApiStepId","stepsFromCommands","maxArgumentLength","DEFAULT_RUNTIME_CONFIG","maxArgumentDepth","initializeRuntimeState","cypressConfig","env","allure","allureCypress","hasCypressConfig","allureCypressReporter","attachToCypress"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { FixtureResult, TestResult } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getPosixPath,\n  getProjectRoot,\n  getRelativePath,\n  getSuiteLabels,\n  getThreadLabel,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  AllureCypressTaskArgs,\n  AllureSpecState,\n  CypressFailMessage,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressSkippedTestMessage,\n  CypressStepFinalizeMessage,\n  CypressStepStartMessage,\n  CypressStepStopMessage,\n  CypressSuiteEndMessage,\n  CypressSuiteStartMessage,\n  CypressTestEndMessage,\n  CypressTestSkipMessage,\n  CypressTestStartMessage,\n  SpecContext,\n} from \"./types.js\";\nimport { DEFAULT_RUNTIME_CONFIG, last } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  specContextByAbsolutePath = new Map<string, SpecContext>();\n  videoOnFailOnly: boolean = false;\n\n  constructor(config: AllureCypressConfig = {}) {\n    const { resultsDir, videoOnFailOnly = false, ...rest } = config;\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...rest,\n    });\n  }\n\n  attachToCypress = (on: Cypress.PluginEvents) => {\n    on(\"task\", {\n      reportAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        return null;\n      },\n      reportFinalAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        if (args.isInteractive) {\n          // In non-interactive mode the spec is ended via the 'after:spec' event instead\n          // to get the spec's video.\n          this.endSpec(args.absolutePath);\n        }\n        return null;\n      },\n    });\n\n    // Emits the remaining fixtures and writes the video of the spec.\n    // In interactive mode it's invoked through the `reportFinalAllureCypressSpecMessages` task.\n    on(\"after:spec\", this.onAfterSpec);\n\n    // Emits the categories and env info. Doesn't work in interactive mode unless\n    // `experimentalInteractiveRunEvents` is set.\n    on(\"after:run\", this.onAfterRun);\n  };\n\n  /**\n   * Forward the `after:spec` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param spec The first argument of the `after:spec` event.\n   * @param results The second argument of the `after:spec` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:spec\", (spec, results) => {\n   *       allureReporter.onAfterSpec(spec, results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterSpec = (spec: Cypress.Spec, results: CypressCommandLine.RunResult | undefined) => {\n    this.endSpec(spec.absolute, results?.video ?? undefined);\n  };\n\n  /**\n   * Forward the `after:run` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param results The argument of the `after:run` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:run\", (results) => {\n   *       allureReporter.onAfterRun(results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterRun = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult | undefined,\n  ) => {\n    this.endRun();\n  };\n\n  endRun = () => {\n    this.#endAllSpecs();\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  };\n\n  endSpec = (specAbsolutePath: string, cypressVideoPath?: string) => {\n    const specContext = this.specContextByAbsolutePath.get(specAbsolutePath);\n    if (specContext) {\n      this.#attachSpecVideo(specContext, cypressVideoPath);\n      this.#emitRemainingScopes(specContext);\n      this.specContextByAbsolutePath.delete(specAbsolutePath);\n    }\n  };\n\n  #endAllSpecs = () => {\n    for (const specAbsolutePath of this.specContextByAbsolutePath.keys()) {\n      this.endSpec(specAbsolutePath);\n    }\n  };\n\n  #applyAllureCypressMessages = ({ messages, absolutePath }: AllureCypressTaskArgs) => {\n    messages.forEach((message) => {\n      if (message.type === \"cypress_run_start\") {\n        this.#startRun(absolutePath);\n        return;\n      }\n\n      const context = this.specContextByAbsolutePath.get(absolutePath);\n      if (!context) {\n        return;\n      }\n\n      switch (message.type) {\n        case \"cypress_suite_start\":\n          this.#startSuite(context, message);\n          break;\n        case \"cypress_suite_end\":\n          this.#stopSuite(context, message);\n          break;\n        case \"cypress_hook_start\":\n          this.#startHook(context, message);\n          break;\n        case \"cypress_hook_end\":\n          this.#stopHook(context, message);\n          break;\n        case \"cypress_test_start\":\n          this.#startTest(context, message);\n          break;\n        case \"cypress_test_pass\":\n          this.#passTest(context);\n          break;\n        case \"cypress_fail\":\n          this.#failHookAndTest(context, message);\n          break;\n        case \"cypress_test_skip\":\n          this.#skipTest(context, message);\n          break;\n        case \"cypress_skipped_test\":\n          this.#addSkippedTest(context, message);\n          break;\n        case \"cypress_test_end\":\n          this.#stopTest(context, message);\n          break;\n        case \"cypress_step_start\":\n          this.#startStep(context, message.data);\n          break;\n        case \"cypress_step_stop\":\n          this.#stopStep(context, message.data);\n          break;\n        case \"cypress_step_finalize\":\n          this.#finalizeStep(context, message.data);\n          break;\n        default:\n          this.#applyRuntimeApiMessages(context, message);\n          break;\n      }\n    });\n  };\n\n  #startRun = (absolutePath: string) => {\n    // This function is executed once on `cypress run`, but it can be executed\n    // multiple times during an interactive session (`cypress open`). Ideally,\n    // in that case, we should remove previous result objects that haven't been\n    // written yet, but it would've required support in ReporterRuntime.\n    // Currently, we're discarding the entire spec context.\n    this.#initializeSpecContext(absolutePath);\n  };\n\n  #startSuite = (context: SpecContext, { data: { id, name, root } }: CypressSuiteStartMessage) => {\n    this.#pushNewSuiteScope(context, id);\n    if (!root) {\n      this.#emitPreviousTestScope(context);\n      context.suiteNames.push(name);\n    }\n  };\n\n  #pushNewSuiteScope = (context: SpecContext, suiteId: string) => {\n    const scope = this.allureRuntime.startScope();\n    context.suiteScopes.push(scope);\n    context.suiteIdToScope.set(suiteId, scope);\n    context.suiteScopeToId.set(scope, suiteId);\n    return scope;\n  };\n\n  #stopSuite = (context: SpecContext, { data: { root } }: CypressSuiteEndMessage) => {\n    this.#emitPreviousTestScope(context);\n    if (!root) {\n      context.suiteNames.pop();\n    }\n    this.#writeLastSuiteScope(context);\n  };\n\n  #writeLastSuiteScope = (context: SpecContext) => {\n    const scope = context.suiteScopes.pop();\n    if (scope) {\n      const suiteId = context.suiteScopeToId.get(scope);\n      if (suiteId) {\n        context.suiteScopeToId.delete(scope);\n        context.suiteIdToScope.delete(suiteId);\n      }\n      this.allureRuntime.writeScope(scope);\n    }\n  };\n\n  #startHook = (context: SpecContext, { data: { name, scopeType, position, start } }: CypressHookStartMessage) => {\n    const isEach = scopeType === \"each\";\n    const isAfterEach = position === \"after\" && isEach;\n    if (!isAfterEach) {\n      this.#emitPreviousTestScope(context);\n    }\n\n    const scope = isEach ? context.testScope : last(context.suiteScopes);\n    if (scope) {\n      context.fixture = this.allureRuntime.startFixture(scope, position, {\n        name,\n        start,\n        status: undefined,\n      });\n    }\n  };\n\n  #stopHook = (context: SpecContext, { data: { duration } }: CypressHookEndMessage) => {\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, (fixture) => {\n        fixture.status ??= Status.PASSED;\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { duration });\n      this.#fixFixtureStepStops(fixtureUuid);\n      context.fixture = undefined;\n    }\n  };\n\n  #startTest = (context: SpecContext, { data: { fullNameSuffix, ...testResultData } }: CypressTestStartMessage) => {\n    this.#emitPreviousTestScope(context);\n    const testScope = this.allureRuntime.startScope();\n    context.testScope = testScope;\n    context.test = this.#addNewTestResult(context, fullNameSuffix, testResultData, [\n      context.videoScope,\n      ...context.suiteScopes,\n      testScope,\n    ]);\n  };\n\n  #addNewTestResult = (\n    context: SpecContext,\n    fullNameSuffix: string,\n    { labels: metadataLabels = [], ...otherTestData }: Partial<TestResult>,\n    scopes: string[],\n  ) => {\n    const posixPath = getPosixPath(context.specPath);\n\n    return this.allureRuntime.startTest(\n      {\n        stage: Stage.RUNNING,\n        labels: [\n          getLanguageLabel(),\n          getFrameworkLabel(\"cypress\"),\n          ...getSuiteLabels(context.suiteNames),\n          ...metadataLabels,\n          ...getEnvironmentLabels(),\n          getHostLabel(),\n          getThreadLabel(),\n          getPackageLabel(context.specPath),\n        ],\n        fullName: `${posixPath}#${fullNameSuffix}`,\n        titlePath: posixPath.split(\"/\").concat(context.suiteNames),\n        ...otherTestData,\n      },\n      scopes,\n    );\n  };\n\n  #failHookAndTest = (context: SpecContext, { data: { status, statusDetails } }: CypressFailMessage) => {\n    const setError = (result: object) => Object.assign(result, { status, statusDetails });\n\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, setError);\n    }\n\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, setError);\n    }\n\n    context.failed = true;\n  };\n\n  #passTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.PASSED;\n      });\n    }\n  };\n\n  #skipTest = (context: SpecContext, { data: { statusDetails } }: CypressTestSkipMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.SKIPPED;\n        if (statusDetails) {\n          testResult.statusDetails = statusDetails;\n        }\n      });\n    }\n  };\n\n  #addSkippedTest = (\n    context: SpecContext,\n    { data: { fullNameSuffix, suites, duration, retries, ...testResultData } }: CypressSkippedTestMessage,\n  ) => {\n    // Tests skipped because of a hook error may share all suites of the current context\n    // or just a part thereof (if it's from a sibling suite).\n    const scopes = suites.map((s) => context.suiteIdToScope.get(s)).filter((s): s is string => Boolean(s));\n\n    const testUuid = this.#addNewTestResult(context, fullNameSuffix, testResultData, [context.videoScope, ...scopes]);\n    this.#stopExistingTestResult(testUuid, { duration, retries });\n    this.allureRuntime.writeTest(testUuid);\n  };\n\n  #stopTest = (context: SpecContext, { data }: CypressTestEndMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.#stopExistingTestResult(testUuid, data);\n      this.allureRuntime.writeTest(testUuid);\n      context.test = undefined;\n    }\n  };\n\n  #stopExistingTestResult = (testUuid: string, { retries, duration }: CypressTestEndMessage[\"data\"]) => {\n    this.allureRuntime.updateTest(testUuid, (testResult) => {\n      if (retries > 0) {\n        testResult.parameters.push({\n          name: \"Retry\",\n          value: retries.toString(),\n          excluded: true,\n        });\n      }\n      testResult.stage = Stage.FINISHED;\n    });\n    this.allureRuntime.stopTest(testUuid, { duration });\n    this.#fixTestStepStops(testUuid);\n  };\n\n  #fixTestStepStops = (testUuid: string) => {\n    this.allureRuntime.updateTest(testUuid, this.#fixStepStops);\n  };\n\n  #fixFixtureStepStops = (fixtureUuid: string) => {\n    this.allureRuntime.updateFixture(fixtureUuid, this.#fixStepStops);\n  };\n\n  #fixStepStops = ({ stop, steps = [] }: TestResult | FixtureResult) => {\n    if (stop) {\n      // In some circumstances, steps becomes dangling and are stopped at the test end/hook end events, which happen\n      // chronologically after the test or fixture ends. This leads to the steps' stop time being greater than the one\n      // of the test/fixture.\n      // The only steps that may be affected are the rightmost descendants of the test/fixture.\n      for (let step = steps.at(-1); step; step = step.steps.at(-1)) {\n        if (step.stop && step.stop > stop) {\n          step.stop = stop;\n        } else {\n          // Steps are always stopped child-to-parent. If a step's stop time is OK, its substeps are also correct.\n          return;\n        }\n      }\n    }\n  };\n\n  #startStep = (context: SpecContext, { id, ...properties }: CypressStepStartMessage[\"data\"]) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      const stepUuid = this.allureRuntime.startStep(rootUuid, undefined, properties);\n      if (stepUuid) {\n        context.stepsByFrontEndId.set(id, stepUuid);\n      }\n    }\n  };\n\n  #stopStep = (context: SpecContext, { id, stop, ...properties }: CypressStepStopMessage[\"data\"]) => {\n    const stepUuid = context.stepsByFrontEndId.get(id);\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        Object.assign(r, properties);\n      });\n      this.allureRuntime.stopStep(stepUuid, { stop });\n    }\n  };\n\n  #finalizeStep = (context: SpecContext, { id, ...properties }: CypressStepFinalizeMessage[\"data\"]) => {\n    const stepUuid = context.stepsByFrontEndId.get(id);\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        Object.assign(r, properties);\n      });\n      context.stepsByFrontEndId.delete(id);\n    }\n  };\n\n  #applyRuntimeApiMessages = (context: SpecContext, message: RuntimeMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      this.allureRuntime.applyRuntimeMessages(rootUuid, [message]);\n    }\n  };\n\n  /**\n   * We must defer emitting a test's scope until we receive all the test's `afterEach` hooks.\n   * At the same time, we should report it as early as we can. That means we should call this\n   * method in the following cases:\n   * - when an `after` hook of the test starts (`after` hooks are called later than `afterEach`)\n   * - when a `before` or `beforeEach` hook of the next test starts (in case the next test has `before`/`beforeEach` hooks)\n   * - when the next test starts (in case the next test doesn't have `before`/`beforeEach` hooks)\n   * - when the test's suite ends (in case the test is the last one in its suite, including the root suite of the spec)\n   * - when a nested suite starts\n   * - when the spec ends\n   */\n  #emitPreviousTestScope = (context: SpecContext) => {\n    const testScope = context.testScope;\n\n    // Checking the test allows us to tell `beforeEach` and `afterEach` apart.\n    // Here we're interested in `afterEach` only.\n    if (!context.test && testScope) {\n      this.allureRuntime.writeScope(testScope);\n      context.testScope = undefined;\n    }\n  };\n\n  #resolveRootUuid = (context: SpecContext) => context.fixture ?? context.test;\n\n  #attachSpecVideo = (context: SpecContext, cypressVideoPath?: string) => {\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || context.failed) && cypressVideoPath;\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(context.videoScope, \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n      this.allureRuntime.writeScope(context.videoScope);\n    }\n  };\n\n  #emitRemainingScopes = (context: SpecContext) => {\n    this.#emitPreviousTestScope(context);\n    context.suiteScopes.forEach((scope) => {\n      this.allureRuntime.writeScope(scope);\n    });\n  };\n\n  #initializeSpecContext = (absolutePath: string) => {\n    const specPath = getRelativePath(absolutePath);\n    const context: SpecContext = {\n      specPath,\n      test: undefined,\n      fixture: undefined,\n      stepsByFrontEndId: new Map(),\n      videoScope: this.allureRuntime.startScope(),\n      suiteIdToScope: new Map(),\n      suiteScopeToId: new Map(),\n      suiteScopes: [],\n      testScope: undefined,\n      suiteNames: [],\n      failed: false,\n    };\n    this.specContextByAbsolutePath.set(absolutePath, context);\n  };\n}\n\nconst createRuntimeState = (allureConfig?: AllureCypressConfig): AllureSpecState => ({\n  config: getRuntimeConfigDefaults(allureConfig),\n  initialized: false,\n  messages: [],\n  testPlan: parseTestPlan(),\n  projectDir: getProjectRoot(),\n  stepStack: [],\n  stepsToFinalize: [],\n  nextApiStepId: 0,\n});\n\nconst getRuntimeConfigDefaults = ({\n  stepsFromCommands: {\n    maxArgumentLength = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentLength,\n    maxArgumentDepth = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentDepth,\n  } = DEFAULT_RUNTIME_CONFIG.stepsFromCommands,\n}: AllureCypressConfig = DEFAULT_RUNTIME_CONFIG): AllureSpecState[\"config\"] => ({\n  stepsFromCommands: {\n    maxArgumentDepth,\n    maxArgumentLength,\n  },\n});\n\nconst initializeRuntimeState = (cypressConfig: Cypress.PluginConfigOptions, allureConfig?: AllureCypressConfig) => {\n  cypressConfig.env.allure = createRuntimeState(allureConfig);\n  return cypressConfig;\n};\n\n/**\n * Sets up Allure Cypress.\n * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).\n * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.\n * @param allureConfig An Allure configuration object (optional).\n * @example\n * ```javascript\n * import { defineConfig } from \"cypress\";\n * import { allureCypress } from \"allure-cypress/reporter\";\n *\n * export default defineConfig({\n *   e2e: {\n *     setupNodeEvents: (on, config) => {\n *       allureCypress(on, config, { videoOnFailOnly: true });\n *       return config;\n *     },\n *     // ...\n *   }\n * });\n * ```\n */\nexport const allureCypress = (\n  on: Cypress.PluginEvents,\n  cypressConfig?: Cypress.PluginConfigOptions,\n  allureConfig?: AllureCypressConfig,\n) => {\n  // Backward compatibility; mainly for JS users who have no type hints\n  if (!allureConfig && cypressConfig && !(\"env\" in cypressConfig)) {\n    allureConfig = cypressConfig as AllureCypressConfig;\n  }\n\n  const hasCypressConfig = cypressConfig && \"env\" in cypressConfig;\n\n  const allureCypressReporter = new AllureCypress(allureConfig);\n  allureCypressReporter.attachToCypress(on);\n\n  if (hasCypressConfig) {\n    initializeRuntimeState(cypressConfig, allureConfig);\n  }\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}
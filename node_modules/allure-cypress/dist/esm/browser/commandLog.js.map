{"version":3,"file":"commandLog.js","names":["isDefined","reportStepStart","serializePropValue","getCurrentStep","getStepStack","pushStep","setupStepFinalization","ALLURE_STEP_CMD_SUBJECT","findAndStopStepWithSubsteps","isLogStep","resolveConsoleProps","resolveRenderProps","shouldCreateStepFromCommandLogEntry","entry","event","instrument","attributes","isApiStepErrorLogEntry","setupScreenshotAttachmentStep","originalName","name","step","commandName","props","nameFromProps","log","attachmentName","startCommandLogStep","currentLogEntry","getCurrentLogEntry","shouldStopCurrentLogStep","stopCommandLogStep","id","pushLogEntry","getCommandLogStepName","scheduleCommandLogStepStop","entryId","_ref","stepDescriptor","type","data","parameters","getCommandLogStepParameters","groupStart","end","originalEndGroup","endGroup","call","originalEnd","Object","is","_ref2","_ref3","_maybeGetAssertionLog","message","displayName","resolvedName","trim","resolvedMessage","maybeGetAssertionLogMessage","maybeGetCucumberLogMessage","stepName","filter","Boolean","join","getLogProps","map","_ref4","k","v","toString","value","getPropValueSetFilter","WELL_KNOWN_CUCUMBER_LOG_NAMES","includes","startsWith","endsWith","substring","length","isAssertionWithMessage","entries","_ref5","isAssertLog","Message","_ref6","findLast","newLogEntry","currentEntryIsGroup","currentEntryType","newEntryType","_ref7"],"sources":["../../../src/browser/commandLog.ts"],"sourcesContent":["import type { Parameter } from \"allure-js-commons\";\nimport type { CypressLogEntry, LogStepDescriptor } from \"../types.js\";\nimport { isDefined } from \"../utils.js\";\nimport { reportStepStart } from \"./lifecycle.js\";\nimport serializePropValue from \"./serialize.js\";\nimport { getCurrentStep, getStepStack, pushStep, setupStepFinalization } from \"./state.js\";\nimport { ALLURE_STEP_CMD_SUBJECT, findAndStopStepWithSubsteps, isLogStep } from \"./steps.js\";\nimport { resolveConsoleProps, resolveRenderProps } from \"./utils.js\";\n\nexport const shouldCreateStepFromCommandLogEntry = (entry: CypressLogEntry) => {\n  const { event, instrument } = entry.attributes;\n  if (instrument !== \"command\") {\n    // We are interested in the \"TEST BODY\" panel only for now.\n    // Other instruments are logged in separate panels.\n    return false;\n  }\n\n  if (event) {\n    // Events are tricky to report as they may span across commands and even leave the test's scope.\n    // We ignore them for now.\n    return false;\n  }\n\n  if (isApiStepErrorLogEntry(entry)) {\n    // Cypress don't create a log message for 'cy.then' except when it throws an error.\n    // This is in particularly happens when the function passed to 'allure.step' throws. In such a case however,\n    // creating an extra step from the log entry is redundant because the error is already included in the report as\n    // a part of the step.\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks if the current step represents a cy.screenshot command log entry. If this is the case, associates the name\n * of the screenshot with the step. Later, that will allow converting the step with the attachment into the attachment\n * step.\n */\nexport const setupScreenshotAttachmentStep = (originalName: string | undefined, name: string) => {\n  const step = getCurrentStep();\n  if (step && isLogStep(step)) {\n    const {\n      name: commandName,\n      props: { name: nameFromProps },\n    } = resolveConsoleProps(step.log);\n    if (commandName === \"screenshot\" && nameFromProps === originalName) {\n      step.attachmentName = name;\n    }\n  }\n};\n\nexport const startCommandLogStep = (entry: CypressLogEntry) => {\n  const currentLogEntry = getCurrentLogEntry();\n\n  if (typeof currentLogEntry !== \"undefined\" && shouldStopCurrentLogStep(currentLogEntry.log, entry)) {\n    stopCommandLogStep(currentLogEntry.log.attributes.id);\n  }\n\n  pushLogEntry(entry);\n  reportStepStart(entry.attributes.id, getCommandLogStepName(entry));\n  scheduleCommandLogStepStop(entry);\n};\n\nexport const stopCommandLogStep = (entryId: string) => findAndStopStepWithSubsteps(({ id }) => id === entryId);\n\nconst pushLogEntry = (entry: CypressLogEntry) => {\n  const id = entry.attributes.id;\n  const stepDescriptor: LogStepDescriptor = { id, type: \"log\", log: entry };\n\n  pushStep(stepDescriptor);\n\n  // Some properties of some Command Log entries are undefined at the time the entry is stopped. An example is the\n  // Yielded property of some queries. We defer converting them to Allure step parameters until the test/hook ends.\n  setupStepFinalization(stepDescriptor, (data) => {\n    data.parameters = getCommandLogStepParameters(entry);\n\n    if (stepDescriptor.attachmentName) {\n      // Rename the step to match the attachment name. Once the names are the same, Allure will render the\n      // attachment in the place of the step.\n      data.name = stepDescriptor.attachmentName;\n    }\n  });\n};\n\nconst scheduleCommandLogStepStop = (entry: CypressLogEntry) => {\n  const { groupStart, end, id } = entry.attributes;\n  if (end) {\n    // Some entries are already completed (this is similar to the idea behind allure.logStep).\n    // Cypress won't call entry.end() in such a case, so we need to stop such a step now.\n    // Example: cy.log\n    stopCommandLogStep(id);\n  } else if (groupStart) {\n    // A logging group must be stopped be the user via the Cypress.Log.endGroup() call.\n    // If the call is missing, the corresponding step will be stopped either at the test's (the hook's) end.\n    const originalEndGroup = entry.endGroup;\n    entry.endGroup = function () {\n      stopCommandLogStep(id);\n      return originalEndGroup.call(this);\n    };\n  } else {\n    // Regular log entries are finalized by Cypress via the Cypress.Log.end() call. We're hooking into this function\n    // to complete the step at the same time.\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalEnd = entry.end;\n    entry.end = function () {\n      stopCommandLogStep(id);\n      return originalEnd.call(this);\n    };\n  }\n};\n\nconst isApiStepErrorLogEntry = (entry: CypressLogEntry) => {\n  const { name } = entry.attributes;\n  return name === \"then\" && Object.is(resolveConsoleProps(entry).props[\"Applied To\"], ALLURE_STEP_CMD_SUBJECT);\n};\n\nconst getCommandLogStepName = (entry: CypressLogEntry) => {\n  const { name, message, displayName } = entry.attributes;\n  const resolvedName = (displayName ?? name).trim();\n  const resolvedMessage = (\n    maybeGetAssertionLogMessage(entry) ??\n    maybeGetCucumberLogMessage(entry) ??\n    resolveRenderProps(entry).message ??\n    message\n  ).trim();\n  const stepName = [resolvedName, resolvedMessage].filter(Boolean).join(\" \");\n  return stepName;\n};\n\nconst getCommandLogStepParameters = (entry: CypressLogEntry) =>\n  getLogProps(entry)\n    .map(([k, v]) => ({\n      name: k.toString(),\n      value: serializePropValue(v),\n    }))\n    .filter(getPropValueSetFilter(entry));\n\nconst WELL_KNOWN_CUCUMBER_LOG_NAMES = [\"Given\", \"When\", \"Then\", \"And\"];\n\nconst maybeGetCucumberLogMessage = (entry: CypressLogEntry) => {\n  const {\n    attributes: { name, message },\n  } = entry;\n  if (WELL_KNOWN_CUCUMBER_LOG_NAMES.includes(name.trim()) && message.startsWith(\"**\") && message.endsWith(\"**\")) {\n    return message.substring(2, message.length - 2);\n  }\n};\n\nconst getLogProps = (entry: CypressLogEntry) => {\n  const isAssertionWithMessage = !!maybeGetAssertionLogMessage(entry);\n  const { props, name } = resolveConsoleProps(entry);\n\n  // accessing LocalStorage after the page reload can stick the test runner\n  // to avoid the issue, we just need to log the command manually\n  // the problem potentially can happen with other storage related commands, like `clearAllLocalStorage`, `clearAllSessionStorage`, `getAllLocalStorage`, `getAllSessionStorage`, `setLocalStorage`, `setSessionStorage`\n  // but probably, we don't need to silent them all at this moment\n  // the context: https://github.com/allure-framework/allure-js/issues/1222\n  if ([\"clearLocalStorage\"].includes(name)) {\n    return [] as [string, unknown][];\n  }\n\n  // For assertion logs, we interpolate the 'Message' property, which contains unformatted assertion description,\n  // directly into the step's name.\n  // No need to keep the exact same information in the step's parameters.\n  return Object.entries(props).filter(([k, v]) => isDefined(v) && !(isAssertionWithMessage && k === \"Message\"));\n};\n\nconst maybeGetAssertionLogMessage = (entry: CypressLogEntry) => {\n  if (isAssertLog(entry)) {\n    const message = resolveConsoleProps(entry).props.Message;\n\n    if (message && typeof message === \"string\") {\n      return message;\n    }\n  }\n};\n\nconst isAssertLog = ({ attributes: { name } }: CypressLogEntry) => name === \"assert\";\n\nconst getCurrentLogEntry = () => getStepStack().findLast(isLogStep);\n\nconst shouldStopCurrentLogStep = (currentLogEntry: CypressLogEntry, newLogEntry: CypressLogEntry) => {\n  const { groupStart: currentEntryIsGroup, type: currentEntryType } = currentLogEntry.attributes;\n  const { type: newEntryType } = newLogEntry.attributes;\n\n  return !currentEntryIsGroup && (currentEntryType === \"child\" || newEntryType !== \"child\");\n};\n\nconst getPropValueSetFilter = (entry: CypressLogEntry) =>\n  entry.attributes.name === \"wrap\" ? () => true : ({ name, value }: Parameter) => name !== \"Yielded\" || value !== \"{}\";\n"],"mappings":"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","ignoreList":[]}